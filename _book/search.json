[
  {
    "objectID": "01_background.html#purpose",
    "href": "01_background.html#purpose",
    "title": "3  Background",
    "section": "3.1 Purpose",
    "text": "3.1 Purpose\nMaintain a standard, living reference guide to establish standard workflows and for onboard analysts on how to access the great work that exists and be a contributor as well. See OHA R Analyst Manual - Purpose/Outline for more details. This guide is not intended to teach you R, but rather how to orient you to how we have set up and use R workflows. If you are looking for a getting started with R guide, we developed a “R Building Blocks Series” in 2022 based on R for Data Science."
  },
  {
    "objectID": "01_background.html#who-is-the-audience",
    "href": "01_background.html#who-is-the-audience",
    "title": "3  Background",
    "section": "3.2 Who is the audience?",
    "text": "3.2 Who is the audience?\nThis guide is designed to assist OHA analysts who want to incorporate R + RStudio and Git + GitHub into their analytical workflows. While the primary target audience is new Strategic Information Analysts, the concepts covered in this guide can be readily applied to workflows across various areas within OHA."
  },
  {
    "objectID": "01_background.html#how-to-use",
    "href": "01_background.html#how-to-use",
    "title": "3  Background",
    "section": "3.3 How to use",
    "text": "3.3 How to use\nThis guide is setup to help users setup their R environments on their local machines"
  },
  {
    "objectID": "01_background.html#how-to-contribute",
    "href": "01_background.html#how-to-contribute",
    "title": "3  Background",
    "section": "3.4 How to contribute",
    "text": "3.4 How to contribute\nTO DO"
  },
  {
    "objectID": "typeface_setup.html#installing-source-sans-pro",
    "href": "typeface_setup.html#installing-source-sans-pro",
    "title": "5  Installing Source Sans Pro Typeface",
    "section": "5.1 Installing Source Sans Pro",
    "text": "5.1 Installing Source Sans Pro\nTo create standard visualizations across our SI team, we rely on one of USAID’s alternate fonts, Sans Source Pro. This typeface is not only not native to R, nor is it a standard to Windows, but is an open source typeface available from Google Fonts.\n\nTo install the font on your GFE, you can find it in Software Center (Start > Microsoft Endpoint manager > Software Center). Once there, you can select the Application called “Source Sans Pro” and click “Install”.\n\nTo install it on your computer, navigate to the typeface on Google Fonts and click the “Download family”. After the folder finishes downloading, unzip it."
  },
  {
    "objectID": "typeface_setup.html#accessing-fonts-in-r",
    "href": "typeface_setup.html#accessing-fonts-in-r",
    "title": "5  Installing Source Sans Pro Typeface",
    "section": "5.2 Accessing Fonts in R",
    "text": "5.2 Accessing Fonts in R\nTo use non-native fonts in R, you must run a program called extrafonts. You will need to run the following code below to install all the fonts on your computer (if desired) and the one you just downloaded/added. You will only need to import fonts only once on your machine. However, to use these fonts with any plotting in R, you will need to load the extrafont as with any other package.\n#load library (install if these are not already installed)\nlibrary(extrafont)  #install.packages(\"extrafont\")\nlibrary(remotes)  #install.packages(\"remotes\")\n\n#downgrade a package dependency for extrafont\n#https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855\ninstall_version(\"Rttf2pt1\", version = \"1.3.8\")\n\n#import all Windows fonts\n  font_import()\n  \n#restart your R session - CTRL + SHIFT + F10\n\n#check that your fonts are now accessible in R\nlibrary(extrafont)\nfonts()"
  },
  {
    "objectID": "typeface_setup.html#additional-resources",
    "href": "typeface_setup.html#additional-resources",
    "title": "5  Installing Source Sans Pro Typeface",
    "section": "5.3 Additional Resources",
    "text": "5.3 Additional Resources\n\nUSAID Graphic Standards Manual\nGoogle Fonts: Sans Source Pro\nStack Overflow: Resolve the “No Font Name Issue”\nglitr package"
  },
  {
    "objectID": "git_setup.html#register-a-github-account",
    "href": "git_setup.html#register-a-github-account",
    "title": "6  Installing git & git client",
    "section": "6.1 Register a GitHub account",
    "text": "6.1 Register a GitHub account\nThis can be done at the GitHub website where you can sign up for an account for free. While you can use your USAID email, you might want to consider using a personal email to maintain access to your work should you leave USAID. Once that is created, you will need to be added to the “USAID-OHA-SI” organization and appropriate teams, which will be further outlined in [insert chapter name]__."
  },
  {
    "objectID": "git_setup.html#install-or-upgrade-r-and-rstudio",
    "href": "git_setup.html#install-or-upgrade-r-and-rstudio",
    "title": "6  Installing git & git client",
    "section": "6.2 Install or upgrade R and RStudio",
    "text": "6.2 Install or upgrade R and RStudio\nAssuming that you’ve installed R and R Studio as outlined ___, it is best to make sure that your installation is upgraded to the most current version. This ensures that you have all of the latest functionality and resources.\nTo make sure your R installation is current, you can check in the “Console”:\n\n# Check what version of R & Rstudio you are using. Try to use the most recent versions.\nR.version.string\n\n[1] \"R version 4.2.2 (2022-10-31 ucrt)\"\n\n\n\n#   Check version of R-studio\n#Rstudio.Version()\n#rstudioapi::getVersion()"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "best_practices.html#organizing-your-r-scripts",
    "href": "best_practices.html#organizing-your-r-scripts",
    "title": "11  Best practices on writing a script",
    "section": "11.1 Organizing your R scripts",
    "text": "11.1 Organizing your R scripts\nR Scripts read just like documents do. We have lines of code that R reads top-down and executes, with specific steps built off of what was done previously.\nWe can organize our scripts with a similar flow to organizing a document, to clean up the script visually and help you and others better understand what each part of the script is used for. We can utilize comments to add headers into our script for organization.\nWhile there is no one right way to organize a script, here is an example of how we tend to set up our scripts within OHA/SI. Check out the [Storing Snippets Section] to see how you can easily add this to beginning of each of your scripts.\n\nIntroduction: name of author, purpose of script, date, reference id, notes\nLoad Dependencies and Libraries\nDefine global options or functions: set up global variables as well (variables you want to call on throughout the script)\nImport Data\nData Cleaning\nAnalysis/Visualization\nExport\n\n\n# AUTHOR:   S. Powers | USAID\n# PURPOSE:  Set up training script\n# REF ID:   c2e621bd \n# LICENSE:  MIT\n# DATE:     2022-09-14\n# UPDATED: \n\n# DEPENDENCIES ------------------------------------------------------------\n  \n# LOAD PACKAGES ------------------------------------------------------------\n\n  library(glamr)\n  library(tidyverse)\n  \n\n# GLOBAL VARIABLES --------------------------------------------------------\n    \n  #Grab metadata\n  msd_source <- source_info(file_path)\n  \n  ref_id <- \"c2e621bd\"\n\n# IMPORT ------------------------------------------------------------------\n  \n  #IMPORT MSD\n  si_path() %>% \n    return_latest() %>% \n    read_msd() %>% \n    reshape_msd(clean = T)\n  \n\n# MUNGE -------------------------------------------------------------------\n  \n# VIZ ---------------------------------------------------------------------\n  \n# SPIN DOWN ---------------------------------------------------------------\n\nYou’ll notice a ref_id being stored in the code chunk above. Our team utilizes reference ids in our R scripts to improve our ability to track code to specific analytic products. These reference ids are stored in captions at the bottom of any visualizations or outputs that are produced from our script, so we can more easily reference the corresponding code from our code repositories. They are automatically generated when we create scripts from a snippet template, which uses the following code to generate a unique, 8 character id:\n\nsubstr(digest::sha1(Sys.time()), start = 1, stop = 8)\n\n[1] \"0accd203\""
  },
  {
    "objectID": "best_practices.html#commenting-your-code",
    "href": "best_practices.html#commenting-your-code",
    "title": "11  Best practices on writing a script",
    "section": "11.2 Commenting Your Code",
    "text": "11.2 Commenting Your Code\nHaving a script without inline comments makes it much more challenging to debug or decipher what is going on. It is important to add comments (text that follows a #) to chunks of code to provide insights to what is going on. There are a couple of major things to keep in mind.\nFirst is to not over-commenting, which then makes it more challenging to both develop and maintain, but also to debug problems. Each chunk should be able to be described succinctly; if you require lots of explanation your code chunk likely needs be be broken into smaller segments.\nSecondly, when we add comments to a script, by default we typically explain what is going on with our code in plain English. However, it’s much more useful to explain why. Instead of adding an inline comment that you are creating a moving average of variable x, it’s better to explain that you are moving average variable x to identify outliers based on this calculation."
  },
  {
    "objectID": "best_practices.html#additional-resources",
    "href": "best_practices.html#additional-resources",
    "title": "11  Best practices on writing a script",
    "section": "11.3 Additional Resources",
    "text": "11.3 Additional Resources\nTidyverse Style Guide Google’s R Style Guide R4DS Workflows"
  },
  {
    "objectID": "using_github.html#how-to-get-added",
    "href": "using_github.html#how-to-get-added",
    "title": "12  Using our GitHub organization",
    "section": "12.1 How to get added?",
    "text": "12.1 How to get added?\nAnyone can view the code on GitHub, but in order to contribute or or participate in issues or projects, you will need to be added to the USAID-OHA-SI organizational account. You can email one of the organization’s “owners” - Aaron Chafetz (achafetz@usaid.gov), Tim Essam (tessam@usaid.gov), Baboyma Kagniniwa (bkagniniwa@usaid.gov), Karishma Srikanth (ksrikanth@usaid.gov) - with the email address associated with your GitHub account."
  },
  {
    "objectID": "using_github.html#search-the-organizational-space",
    "href": "using_github.html#search-the-organizational-space",
    "title": "12  Using our GitHub organization",
    "section": "12.2 Search the organizational space",
    "text": "12.2 Search the organizational space\nGitHub is a powerful tool because it allows us to collaborate and share our code, with others and our future selves. By committing and pushing code, you make all of your work searchable. This feature becomes a huge asset to others trying to learn or review how previous analyses were run. If you go to GitHub, our organization page, or github.com/search, you can search through all our code.\nFor example, if you were interested in learning about how the across() function is used, you could search org:USAID-OHA-SI mutate across to see all the instances of how we are applying this function from dplyr or you could search for how viral load coverage is calculated, org:USAID-OHA-SI vlc. GitHub has a great reference document for using the powerful search features."
  },
  {
    "objectID": "using_github.html#how-to-navigate",
    "href": "using_github.html#how-to-navigate",
    "title": "12  Using our GitHub organization",
    "section": "12.3 How to navigate",
    "text": "12.3 How to navigate\nThe USAID-OHA-SI organizational account hosts all of our team’s R scripts and packages. Currently we have over 100 repositories on GitHub, so finding what you are looking for can be challenging. One thing to note as well is that we tend to use fun names for projects. So instead of calling a project space “COP planning”, we come up with names loosely related, badboys, as referring to the Will Smith and Martin Lawrence movie about two cops. It’s all our bad attempt at humor but it keeps things fun and interesting. Since the project names are very loosely related, you can look through the Description which will better summarize the project.\nBelow are a few useful repos to review/reference:\n\ngroundhogday: quarterly scripts that we find ourselves needing to use again and again\ncatch-22: one off analytic requests\nagitprop: high level communications visuals typically produced for the OHA Front Office\n\nIn addition to having R projects stored as repositories, we rely on GitHub for hosting our R packages so everyone can access them. Each of our packages have their own websites, built through pkgdown, with documentation and are easily navigable from the SI blog.\nThe package pages are great resources, but sometimes you want to see the code underlying a function or want to suggest a change via a pull request (PR). You can find search through the USAID-OHA-SI account to find the repository and find the code you are looking for."
  },
  {
    "objectID": "using_github.html#when-should-i-create-a-new-repo",
    "href": "using_github.html#when-should-i-create-a-new-repo",
    "title": "12  Using our GitHub organization",
    "section": "12.4 When should I create a new repo?",
    "text": "12.4 When should I create a new repo?\nAs you can see, we have lots of repositories that are in existence. Repositories are essentially projects, so we can think about creating one when our work does not easily fit into another existing repository or is going to be large and complex and needs to stand on its own. For example, if I review targets for Tanzania from their target setting tool, this likely should not be its own repo, but fits either within badboys (SI related support for PEPFAR COPs) or rebooTZ (OHA SI support for Tanzania)."
  },
  {
    "objectID": "using_github.html#how-can-i-contribute",
    "href": "using_github.html#how-can-i-contribute",
    "title": "12  Using our GitHub organization",
    "section": "12.5 How can I contribute",
    "text": "12.5 How can I contribute\nVersion control and capturing all of our coding on GitHub is important for a number reasons:\n\nReduces barriers to collaboration\nProvides a form of back up\nCaptures project evolution\nExperiment without fear\nCommit to transparency\n\nThere are a number of ways in which you can contribute to our community and global good.\n\nSubmit an issue - If you are running into a bug with the code, getting unexpected results, or have a suggestion to make, you can submit a ticket on GitHub. For example, if I have an issue with a date conversion in glamr, I would go to the package repo, github.com/USAID-OHA-SI/glamr and navigate to the “Issues” tab at the top of the repo. There I could select the green “New issue” button, and clearly the descibe the issue/suggestion (check out the Getting Help chapter on writing a reproducible example).\nContribute code or a fix to an existing repo/package - If you have written your own code, you can submit a pull request (PR) on github to get it added to the repo. When working on a shared project, it’s best practice to work on your own branch and then submit a PR to get that branch included in the repo. Clone the repo to your RStudio and then create (checkout) a new branch (this can be done through the git IDE tab within RStudio or can be done in the terminal in RStudio, e.g git checkout -b dev_fix-that-thing). Once you have made the changes and verified the code runs as intended, you can push your branch. At that stage, you can go to the repo on GitHub, navigate to the “Pull requests” tab and then create a new pull request from your dev branch to the main branch. The project or package owner/maintainer will review the PR for inclusion into the repo.\nCreating a new repo : If you have a new project that does not exist elsewhere, you can create a new repo. The “Setting up a project” chapter details how to do this through RStudio, but you can also setup your project on GitHub. Under our organization, select Repositories and then click the green button the right, “New Repository”. Front there you will want to add a (witty) repo name with a solid description. The repo should be public, you should add a README, .gitignore, and MIT license.\n\nFrom there you can clone the project locally, but selecting the green “Code” button, copying the HTTPS url and setting up a version control project in RStudio."
  },
  {
    "objectID": "getting_help.html#additional-resources",
    "href": "getting_help.html#additional-resources",
    "title": "13  Getting help/setting up a reprex",
    "section": "13.1 Additional Resources",
    "text": "13.1 Additional Resources\n\nAsk Better Code Questions (and Get Better Answers) With Reprex\nreprex package\nHelp Me Help You: Creating reproducible examples | RStudio (2018)\nSo you’ve been asked to make a reprex\nFAQ: What’s a reproducible example (reprex) and how do I create one?"
  },
  {
    "objectID": "r_packages.html",
    "href": "r_packages.html",
    "title": "14  R Packages",
    "section": "",
    "text": "Intro\nCreating a new package Setup package structure Set up package - while you can create a new package using devtools, it is much easier to use Rstudio. To create a new package use the Create Project command and select the New Directory option. Select R package on the pop-up screen."
  },
  {
    "objectID": "vignettes.html",
    "href": "vignettes.html",
    "title": "15  Creating a Website and Vignettes for a Package",
    "section": "",
    "text": "Vignettes are great features of R packages that introduce the user to the package’s intended use and functionality. As you build a series of vignettes for package users, you can organize them into a website using the pkgdown package."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R guide for Strategic Information Advisors",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chafetz, Aaron H. 2023. “R Guide for Strategic Information\nAdvisors.” Stractegic Info. 1 (1): 00–99. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Chafetz (2023) for additional discussion of literate programming.\n\n\n\n\nChafetz, Aaron H. 2023. “R Guide for Strategic Information Advisors.” Stractegic Info. 1 (1): 00–99. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "r_setup.html#installing-r-and-rstudio",
    "href": "r_setup.html#installing-r-and-rstudio",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.1 Installing R and RStudio",
    "text": "4.1 Installing R and RStudio\nWorking from your USAID laptop, Government Furnished Equipment (GFE), you can install R and RStudio without having to submit a ticket to the M/CIO Help Desk. R is the open-source statistics package that we use for our work and is the engine that powers RStudio Desktop, the user interface or integrated development environment (IDE). RStudio Desktop or another IDE such as Visual Studio Code is not required to use R, but will vastly improve your experience.\nTo install both R and RStudio Desktop on your GFE, go to Software Center on your computer (Start > Microsoft Endpoint manager > Software Center) Once there, you can select the Application called “R for Windows” and click “Install”. After that completes, you can then select “RStudio Desktop” and then “Install”. If you run into any issues, first try restarting your machine and if that fails, you can contact M/CIO Help Desk.\n\nIf working on a personal machine, you can install R from CRAN. Select “Download R for Windows” and then “base” and follow the instructions for installing that pop up when you launch the .exe file from your downloads. RStudio Desktop can be installed Posit’s website by selecting “Download RStudio Desktop for Windows” and then following the setup instructions."
  },
  {
    "objectID": "r_setup.html#installing-rtools",
    "href": "r_setup.html#installing-rtools",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.2 Installing Rtools",
    "text": "4.2 Installing Rtools\nIf you are working on a GFE, you will need to submit a ticket to M/CIO Help Desk to install Rtools on your machine. If you are installing from your personal machine, you will need to download and install the version of Rtools based on the R version you are using. You can determine what version of R you are using by opening up a new instance of R or RStudio and the version will be the very first thing that appears in your console."
  },
  {
    "objectID": "r_setup.html#rstudio-global-options",
    "href": "r_setup.html#rstudio-global-options",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.3 RStudio Global Options",
    "text": "4.3 RStudio Global Options\nIt’s best practice to start with a clean session each time you load up RStudio, so you will want to adjust some default options in your IDE. To access these, in the menu bar at the top, navigate to Tools > Global Options. Here are the places you will want to make changes to the default options before you hit “Apply”:\n\nUncheck “Result most recent opened project at startup”\nUncheck “Restore .RData into Workspace at startup”\nChange dropdown to “Never” for “Save workspace to .RData on exit”\nUncheck “Always save history (even when not saving .RData)"
  },
  {
    "objectID": "r_setup.html#storing-snippets",
    "href": "r_setup.html#storing-snippets",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.4 Storing Snippets",
    "text": "4.4 Storing Snippets\nRstudio code snippets are predefined code shortcuts that can be used to quickly insert commonly used code blocks. The use of snippets can improve coding efficiency, reduce the time spent copying and pasting code from other scripts, and improve the readability of your code by providing a standardized format for your analytical scripts.\nTo create your own snippets in Rstudio, go to “Tools > Global Options > Code > Edit Snippets. This will open a file where you can define your custom snippets using a simple syntax.\n\nRstudio comes bundled with a set of built-in snippets that you may have already used without even realizing it. The snippets are not limited to just R, but to all of the different languages you can code in within the Rstudio IDE. In the example below, this snippet sets up the formatting of a script for you. To create a new snippet, follow the syntax in the window and click save. Your snippet is now available for use.\n\nFor example, if we wanted to create snippet to insert a new object that represents the time right now, we could use the following snippet:\nsnippet time “insert time right now”     \n   Sys.time()\nClose your snippet window by hitting save, and return to the console.\nWhen we start typing we will then see the following appear.\n\nIf we hit Tab, the Sys.time() function will be inserted in the console window. When we hit enter, Rstudio will report the current time. While this may not be that useful, you can imagine how useful this may be if you need to insert the date or a repeated chunk of code."
  },
  {
    "objectID": "r_setup.html#types-of-snippets",
    "href": "r_setup.html#types-of-snippets",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.5 Types of snippets",
    "text": "4.5 Types of snippets\nThere are broadly four different types of snippets available for use or creation.\n\nPredefined snippets: RStudio comes with several built-in snippets for common programming tasks. These snippets cover a wide range of R code structures and functions, such as for loops, if statements, function definitions, and more.\nTriggering snippets: Snippets are triggered by typing a specific keyword followed by pressing the “Tab” key. For example, if you type “for” and then press “Tab,” RStudio will automatically expand the snippet into a basic for loop structure.\nTab stops: Snippets may contain tab stops (usually denoted by the ${1}), indicated by numbers or placeholders. These allow you to quickly navigate through the different sections of the snippet by pressing the “Tab” key. For example, if you have a placeholder for a variable name, pressing “Tab” will move the cursor to that position, allowing you to enter the desired variable name.\nDynamic snippets: Snippets can be dynamic and include placeholders that are automatically filled with values based on the context.For example, the “# DATE: r Sys.Date()” code chunk will insert today’s date into your script.\n\nBy using RStudio snippets, you can streamline your coding workflow, reduce repetitive typing, and improve overall productivity when working with R code. We highly encourage you to take advantage of snippets and share your discoveries with the team.\nLink to SI Snippets"
  },
  {
    "objectID": "r_setup.html#additional-resources",
    "href": "r_setup.html#additional-resources",
    "title": "4  Installing R, RStudio, RTools",
    "section": "4.6 Additional Resources",
    "text": "4.6 Additional Resources\n\nInstalling Rtools - Jeffrey Leek\nRBBS - 0 Software and Account Setup: Setting up Rtools - Aaron Chafetz"
  },
  {
    "objectID": "access_store_data.html#storing-pepfar-data",
    "href": "access_store_data.html#storing-pepfar-data",
    "title": "10  Storing and accessing PEPFAR data",
    "section": "10.1 Storing PEPFAR Data",
    "text": "10.1 Storing PEPFAR Data\nWhen working on any given project, the general advice is typically to store your data in that specific project ’s repository. This advice is a good best practice, but does not translate well in the PEPFAR space for two main reasons: file size and sensitivity. Instead, we recommend storing PEPFAR structured datasets in a centralized location on your machine outside of the project, e.g. C:\\Users\\spower\\Documents\\Data.\nOur work primarily revolves around using PEPFAR structured datasets, which are large, cumbersome SQLview output files, e.g. OUxIM, PSNU, PSNUxIM, NAT_SUBNAT, and FSD. Given this fact, it makes more sense for us to store these dataset in a central location on our machines rather than duplicating these files in each project. These PEPFAR structured datasets are easily accessible for anyone working in PEPFAR, either from PEPFAR Panorama or through the DATIM Genie.\nThe second reason for storing these datasets outside of the project is to avoid any risk of posting these non-public data to a public space when using version control. While these structured dataset are aggregated and not individual patient level data, they are not published by PEPFAR to the public and may contain sensitivities when it comes to key populations or when using data at the facility level.\nFor small (and non-PEPFAR structured) datasets, we recommend storing these data within the project either in the Data and Data_public folder. Another alternative is storing the data on Google Drive in a shared folder and pulling the data down utilizing the Google API via the googledrive or googlesheets4 packages."
  },
  {
    "objectID": "access_store_data.html#accessing-pepfar-data",
    "href": "access_store_data.html#accessing-pepfar-data",
    "title": "10  Storing and accessing PEPFAR data",
    "section": "10.2 Accessing PEPFAR Data",
    "text": "10.2 Accessing PEPFAR Data\nPEPFAR maintains a number of different structured datasets across MER, EA, Budget, and SIMS. Data are entered into DATIM, the system of record, by partners and goes through an approval process that takes about six weeks after the quarter ends. In-process data can be accessed through DATIM and the DATIM Genie, which will export data in the typical structured manner. Otherwise, datasets are made available on PEPFAR Panorama for download. PEPFAR data can also be pulled directly from DATIM utilizing an API (see the DHIS2 API documentation or our grabr package\nAs mentioned in the last section, we recommend storing these datasets in a central location on your computer. This creates a problem from a collaboration standpoint, as we can’t just point to the “Data” folders in our project using a relative path; we have to provide a file path that only works on one user’s machine and not another. To solve this dilemma, we use a function in the glamr package called si_paths() which access the paths we have stored locally to where our PEPFAR structured datasets reside. This way, when you pick up a coworker’s code, you don’t have to change any of the file paths, it just works.\nThose local paths need to be set once and stored in your .Rprofile. To do so, you will run glamr::set_paths() to store all the relevant paths (you can ignore any that aren’t relevant to you). The below example would be the code I would run in the console indicating where my folders are for the MSD, DATIM files and Downloads.\n\nlibrary(glamr)\nset_paths(folderpath_msd = \"~/Documents/Data\",\n  folderpath_datim =  \"~/Documents/DATIM\",\n  folderpath_downloads =  \"~/Downloads\")"
  },
  {
    "objectID": "access_store_data.html#additional-resources",
    "href": "access_store_data.html#additional-resources",
    "title": "10  Storing and accessing PEPFAR data",
    "section": "10.3 Additional Resources",
    "text": "10.3 Additional Resources\n\nProject Workflow Vignette\nglamr package\ngrabr package\nDHIS2 API Documentation"
  }
]
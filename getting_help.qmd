---
title: "Getting help/setting up a reprex"
---

We are working in a very collaborative environment and benefit from being able to troubleshoot errors with our colleagues. Often we receive partial screenshots or large code chunks which makes it challenging to identify the root of the problem. A better route and a best practice is to develop a **repr**esentative **ex**ample, or reprex. The Posit team created and maintains the [`reprex` package](reprex.tidyverse.org/index.html) as part of the `tidyverse`. You can install it the way you would any other package - `install.packages(“reprex”)`.

The idea of a reprex is to remove all the superfluous information to keep just a minimal set of code and data that others can run.  Here are some great qualities of a reprex from [Jacob Goldstiend-Greenwood](https://data.library.virginia.edu/ask-better-code-questions-and-get-better-answers-with-reprex/)
  - self-contained: everything needed to recreate the issue at hand should be contained in the reprex
  - minimal: use small and/or built-in data (e.g., mtcars), and strip away extraneous code
  - runnable: a simple copy-paste should be all that’s needed to run the reprex, and running it shouldn’t generate errors *except for those that the reprex is intended to exemplify*
optional: don’t force people to run the code in order to understand the issue; include the relevant output/errors as part of the reprex (in a way that doesn’t disrupt the code’s runnability)
reproducible: use seeds for random processes
nonintrusive: don’t mess with other people’s settings and computer environments (but if you do, [a] be obvious about it and [b] put things back the way they were)

Rather than providing a screenshot or a lengthy set of code, we want to provide others with an example likely with a small, dummy dataset of only the code we are having issue with. This allows someone else to re-run your code and hopefully see exactly what you are seeing and then can help debug.  The process of boiling down your problem into a reproducible example more often than not helps you identify the source of the problem on your own.

> “Writing a good reprex can seem like a hassle but if the asker can’t be bothered, why should the answerer?” - [Jenny Bryan](https://speakerdeck.com/jennybc/reprex-help-me-help-you?slide=21)

With the `reprex` package installed, you are ready to create a representative example, using the qualities from above. You will want to take advantage of packages like `tibble` and `datapasta` for the creation of the example. You can use build in datasets (`data()`) or build your own replying on functions like `runif()`, `sample()`, `setseed()`, and `expand_grid()`. Once you write you code, you can copy your code (making sure to include the loading of the libraries) and then run `reprex::reprex()` to render a output containing the code, outputs, and error messages. 

Let’s look at an example. In the code I’m working with, I am struggling to parse the indicator name out of a complex concatenated string of text. The indicator is always the first word before the first period. Rather than providing the full dataset or the full chunk of code I’m working with, I want to just pull a few examples.

```{r}
#| eval: false

library(dplyr, warn.conflicts = FALSE)
library(tibble)
library(stringr)

set.seed(42)
datapackr::cop23_data_pack_schema %>%
  as_tibble() %>%
  filter(dataset == "mer") %>%
  slice_sample(n = 10) %>%
  pull(indicator_code) %>%
  datapasta::vector_paste()
```

In the code above, I have set a seed so that I (or someone else can replicate this in the future to get the same sample of names from the larger list. I am pulling the string from a schema file which is in package I don’t really need anyone else to install (since it has a ton of dependencies; all I really need is the string to work with. At the end, I have also used a `datapasta` function which immediately pastes the vector into my script and I don’t have to then worry about reruning the code again. 

I can then include that output in the reprex example in my code chunk that I want to get help with.

```{r}
#| eval: false

library(dplyr, warn.conflicts = FALSE)
library(tibble)
library(stringr)
 
ind_samp <- c("PMTCT_STAT.N.KnownPos.T2", "KP_PREV.T2", "GEND_GBV.PE.T", "TB_PREV.N.New.T2", "OVC_SERV.DREAMS.T", "HTS_TST.STI.Pos.T", "KP_MAT.T", "HTS_RECENT.T", "HTS_RECENT.T2", "TX_PVLS.D.KP.T")

tibble(indicator_code = ind_samp) %>% 
  mutate(indicator = str_extract(indicator_code, "[^\\.]+"))
```

With a limited set of observations and only code that is relevant to the problem I’m facing, I can now generate the reprex. To do so, I will highlight the full code chunk including the libraries above and the copy it. After that, I can run the following code in my console and it will generate the output below.

```{r}
#| eval: false

library(dplyr, warn.conflicts = FALSE)
library(tibble)
library(stringr)

ind_samp <- c("PMTCT_STAT.N.KnownPos.T2", "KP_PREV.T2", "GEND_GBV.PE.T", "TB_PREV.N.New.T2", "OVC_SERV.DREAMS.T", "HTS_TST.STI.Pos.T", "KP_MAT.T", "HTS_RECENT.T", "HTS_RECENT.T2", "TX_PVLS.D.KP.T")
tibble(indicator_code = ind_samp) %>% 
  mutate(indicator = str_extract(indicator_code, "^.*\\."))
#> # A tibble: 10 × 2
#>    indicator_code           indicator             
#>    <chr>                    <chr>                 
#>  1 PMTCT_STAT.N.KnownPos.T2 PMTCT_STAT.N.KnownPos.
#>  2 KP_PREV.T2               KP_PREV.              
#>  3 GEND_GBV.PE.T            GEND_GBV.PE.          
#>  4 TB_PREV.N.New.T2         TB_PREV.N.New.        
#>  5 OVC_SERV.DREAMS.T        OVC_SERV.DREAMS.      
#>  6 HTS_TST.STI.Pos.T        HTS_TST.STI.Pos.      
#>  7 KP_MAT.T                 KP_MAT.               
#>  8 HTS_RECENT.T             HTS_RECENT.           
#>  9 HTS_RECENT.T2            HTS_RECENT.           
#> 10 TX_PVLS.D.KP.T           TX_PVLS.D.KP.
```

The `reprex` output has everything I need to now share this with others - my code that is minimal and self-contained, you can see the code I ran and the output (no errors here). I can now ask my colleagues for help with my regex expression and why I am getting “PMTCT_STAT.N.KnownPos.” for example in the first line when I just want “PMTCT_STAT”. 

Creating a reprex takes some getting used to, but the more you do it, the easier it is to create on the fly when you run into an error. And as mention before, the process of creating the reprex often results in you discovering the solution to your problem on your own.

## Additional Resources
  - [Ask Better Code Questions (and Get Better Answers) With Reprex](https://data.library.virginia.edu/ask-better-code-questions-and-get-better-answers-with-reprex/)
  - [reprex package](https://reprex.tidyverse.org/index.html)
  - [Help Me Help You: Creating reproducible examples | RStudio (2018)](https://www.youtube.com/watch?v=5gqksthQ0cM)
  - [So you’ve been asked to make a reprex](https://www.jessemaegan.com/blog/so-you-ve-been-asked-to-make-a-reprex/)
  - [FAQ: What's a reproducible example (`reprex`) and how do I create one?](https://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-create-one/5219)
